@using CSSPWebTools.Models;
@using CSSPWebTools.Views.PolSource.Resources;
@using CSSPWebTools.Controllers;
@using CSSPEnumsDLL.Enums;
@using CSSPEnumsDLL.Services;
@using CSSPModelsDLL.Models;

@{
    URLModel urlModel = (URLModel)ViewBag.URLModel;
    PolSourceSiteModel polSourceSiteModel = (PolSourceSiteModel)ViewBag.PolSourceSiteModel;
    AddressModel addressModel = (AddressModel)ViewBag.AddressModel;
    MapInfoPointModel mapInfoPointModel = (MapInfoPointModel)ViewBag.MapInfoPointModel;
    PolSourceController polSourceController = (PolSourceController)ViewBag.PolSourceController;
    List<PolSourceObservationModel> polSourceObservationModelList = (List<PolSourceObservationModel>)ViewBag.PolSourceObservationModelList;
    BaseEnumService _BaseEnumService = new BaseEnumService(ViewBag.Language);
    bool First = true;
    float Lat = 0.0f;
    float Lng = 0.0f;
    if (addressModel != null && !string.IsNullOrWhiteSpace(addressModel.LatLngText))
    {
        bool Found = false;
        try
        {
            if (ViewBag.Language == LanguageEnum.fr)
            {
                addressModel.LatLngText = addressModel.LatLngText.Replace(", ", "| ");
                addressModel.LatLngText = addressModel.LatLngText.Replace(".", ",");

                Lat = float.Parse(addressModel.LatLngText.Substring(0, addressModel.LatLngText.IndexOfAny("| ".ToCharArray())).Trim());
                Lng = float.Parse(addressModel.LatLngText.Substring(addressModel.LatLngText.LastIndexOfAny("| ".ToCharArray())).Trim());
            }
            else
            {
                Lat = float.Parse(addressModel.LatLngText.Substring(0, addressModel.LatLngText.IndexOfAny(", ".ToCharArray())).Trim());
                Lng = float.Parse(addressModel.LatLngText.Substring(addressModel.LatLngText.LastIndexOfAny(", ".ToCharArray())).Trim());
            }
            Found = true;
        }
        catch (Exception)
        {
            // nothing
        }

        if (!Found)
        {
            try
            {
                if (ViewBag.Language == LanguageEnum.fr)
                {
                    addressModel.LatLngText = addressModel.LatLngText.Replace(" ", "|");
                    addressModel.LatLngText = addressModel.LatLngText.Replace(".", ",");

                    Lat = float.Parse(addressModel.LatLngText.Substring(0, addressModel.LatLngText.IndexOfAny(" ".ToCharArray())).Trim());
                    Lng = float.Parse(addressModel.LatLngText.Substring(addressModel.LatLngText.LastIndexOfAny(" ".ToCharArray())).Trim());
                }
                else
                {
                }
            }
            catch (Exception)
            {
                // nothing
            }
        }

    }

}

<div id="PolSourceSiteDiv">
    <div class="PolSourceSiteAnalysesTop">
        <p>
            <button class="jbPolSourceEffectShowHideAnalysesTool btn btn-default">@PolSourceViewRes.ShowAnalysesTool</button>
        </p>
        <div class="PolSourceSiteAnalyses"></div>
    </div>
    @if (addressModel != null)
    {
        <div class="text-nowrap">
            <label class="text-lighter pushRight">@PolSourceViewRes.Address</label>

            <span class="elementSpacing text-lowercase">(@(_BaseEnumService.GetEnumText_AddressTypeEnum(addressModel.AddressType)))&nbsp;</span>
            <span>
                @addressModel.StreetNumber
                @addressModel.StreetName
                @addressModel.StreetTypeText,
                @addressModel.MunicipalityTVText,
                @addressModel.ProvinceTVText,
                @addressModel.PostalCode,
                @addressModel.CountryTVText
            </span>
            <br />
            <span class=" elementSpacing text-lowercase">(Google)&nbsp;</span>
            <span>
                @if (Lat != 0.0f)
                {
                    <button class="jbAddressLocationCrossOnMap btn btn-default" data-lat="@Lat" data-lng="@Lng"><span class="glyphicon glyphicon-map-marker"></span></button>
                    <span>@addressModel.LatLngText &nbsp; &nbsp; &nbsp;</span>
                }
                @addressModel.GoogleAddressText
            </span>
        </div>
    }
    @foreach (PolSourceObservationModel polSourceObservationModel in polSourceObservationModelList)
    {
        <div class="panel panel-@(First ? "info" : "default")">
            <div class="panel-heading">
                <div class="panel-title">
                    <span>@polSourceObservationModel.ObservationDate_Local.ToString("d")</span>
                    @if (First)
                    {
                        if (polSourceSiteModel.InactiveReason == null)
                        {
                            polSourceSiteModel.InactiveReason = PolSourceInactiveReasonEnum.Error;
                        }

                        <span> (@(polSourceSiteModel.IsPointSource ? PolSourceViewRes.PointSource : PolSourceViewRes.NonPointSource)) </span>
                    }
                    <span> @polSourceObservationModel.ContactTVText</span>
                    @if (polSourceObservationModel.DesktopReviewed)
                    {
                        <strong class="text-primary">&nbsp;&nbsp;(@PolSourceViewRes.DesktopReviewed)</strong>
                    }
                </div>
            </div>
            <div class="panel-body">
                <span><b>@PolSourceViewRes.WrittenDescription:</b></span>
                <span>@Html.Raw(polSourceObservationModel.Observation_ToBeDeleted)</span>
                <br />
                <br />
                <div><b>@PolSourceViewRes.SelectedDescription:</b></div>
                <ul class="list-unstyled">
                    @for (int i = 0, count = polSourceObservationModel.PolSourceObservationIssueModelList.Count; i < count; i++)
                    {
                        <li>
                            <div class="PolSourceObservationIssueText h4">@PolSourceViewRes.Issue (@(i + 1))</div>
                            @foreach (PolSourceObsInfoEnum polSourceObsInfo in polSourceObservationModel.PolSourceObservationIssueModelList[i].PolSourceObsInfoList)
                            {
                                string reportPartText = _BaseEnumService.GetEnumText_PolSourceObsInfoReportEnum(polSourceObsInfo);

                                switch (((int)polSourceObsInfo).ToString().Substring(0, 3))
                                {
                                    case "101":
                                        {
                                            reportPartText = reportPartText.Replace("Source", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Source</strong>");
                                        }
                                        break;
                                    //case "153":
                                    //    {
                                    //        reportPartText = reportPartText.Replace("Dilution Analyses", "<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Dilution Analyses</strong>");
                                    //    }
                                    //    break;
                                    case "250":
                                        {
                                            reportPartText = reportPartText.Replace("Pathway", "<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Pathway</strong>");
                                        }
                                        break;
                                    case "900":
                                        {
                                            reportPartText = reportPartText.Replace("Status", "<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Status</strong>");
                                        }
                                        break;
                                    case "910":
                                        {
                                            reportPartText = reportPartText.Replace("Risk", "<strong>Risk</strong>");
                                        }
                                        break;
                                    case "110":
                                    case "120":
                                    case "122":
                                    case "151":
                                    case "152":
                                    case "153":
                                    case "155":
                                    case "156":
                                    case "157":
                                    case "163":
                                    case "166":
                                    case "167":
                                    case "170":
                                    case "171":
                                    case "172":
                                    case "173":
                                    case "176":
                                    case "178":
                                    case "181":
                                    case "182":
                                    case "183":
                                    case "185":
                                    case "186":
                                    case "187":
                                    case "190":
                                    case "191":
                                    case "192":
                                    case "193":
                                    case "194":
                                    case "196":
                                    case "198":
                                    case "199":
                                    case "220":
                                    case "930":
                                        {
                                            reportPartText = @"<span class=""hidden"">" + reportPartText + "</span>";
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                <span>@Html.Raw(reportPartText)</span>
                            }
                        </li>
                        if (!string.IsNullOrWhiteSpace(polSourceObservationModel.PolSourceObservationIssueModelList[i].ExtraComment))
                        {
                            <li class="spaceLeft10">
                                <ul class="list-unstyled">
                                    <li>
                                        <br />
                                        <strong>@PolSourceViewRes.ExtraComment</strong>
                                        <br /><span>&nbsp;&nbsp;&nbsp;&nbsp;@polSourceObservationModel.PolSourceObservationIssueModelList[i].ExtraComment</span>
                                    </li>
                                </ul>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        if (First)
        {
            First = false;
        }
    }
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="panel-title">
                <h4>Pictures</h4>
            </div>
        </div>
        <div class="panel-body">
            @Html.Action("_fileList", "File", new { Q = urlModel.Q })
        </div>
    </div>
</div>


<script type="text/javascript">
    $(function () {
        cssp.PolSourceSite.Init();
    });
</script>
